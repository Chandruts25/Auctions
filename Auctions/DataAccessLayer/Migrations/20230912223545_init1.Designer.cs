// <auto-generated />
using System;
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AuctionDbContext))]
    [Migration("20230912223545_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Auction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AuctionDays")
                        .HasColumnType("int");

                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Increment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Reserve")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StartAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Bid", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AuctionDays")
                        .HasColumnType("int");

                    b.Property<decimal>("BiddingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Car", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasImages")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutomatic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPetrol")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagePartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VinDecoded")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DataAccessLayer.Models.CarReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarReviews");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("Listing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListingGrid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediumUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Offer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OfferAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMoreCars")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMorePurchases")
                        .HasColumnType("bit");

                    b.Property<string>("Idp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Video", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Address", b =>
                {
                    b.HasOne("DataAccessLayer.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("DataAccessLayer.Models.Address", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Models.Car", b =>
                {
                    b.HasOne("DataAccessLayer.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.OwnsOne("DataAccessLayer.Models.CarProperties", "Properties", b1 =>
                        {
                            b1.Property<string>("CarId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("ABS")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ActiveSafetySysNote")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AdaptiveCruiseControl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AdaptiveDrivingBeam")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AdaptiveHeadlights")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AdditionalErrorText")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AirBagLocCurtain")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AirBagLocFront")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AirBagLocKnee")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AirBagLocSeatCushion")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AirBagLocSide")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AutoReverseSystem")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AutomaticPedestrianAlertingSound")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AxleConfiguration")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Axles")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BasePrice")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryA")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryA_to")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryCells")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryInfo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryKWh")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryKWh_to")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryModules")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryPacks")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryV")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BatteryV_to")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BedLengthIN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BedType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BlindSpotIntervention")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BlindSpotMon")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BodyCabType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BodyClass")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BrakeSystemDesc")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BrakeSystemType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BusFloorConfigType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BusLength")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BusType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CAN_AACN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CIB")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CashForClunkers")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ChargerLevel")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ChargerPowerKW")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CoolingType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CurbWeightLB")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CustomMotorcycleType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DaytimeRunningLight")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DestinationMarket")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DisplacementCC")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DisplacementCI")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DisplacementL")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Doors")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DriveType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DriverAssist")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DynamicBrakeSupport")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EDR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ESC")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EVDriveUnit")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ElectrificationLevel")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineConfiguration")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineCycles")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineCylinders")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineHP")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineHP_to")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineKW")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineManufacturer")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EngineModel")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EntertainmentSystem")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ErrorCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ErrorText")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ForwardCollisionWarning")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FuelInjectionType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FuelTypePrimary")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FuelTypeSecondary")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GCWR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GCWR_to")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GVWR")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GVWR_to")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("KeylessIgnition")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LaneCenteringAssistance")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LaneDepartureWarning")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LaneKeepSystem")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LowerBeamHeadlampLightSource")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Make")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MakeID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Manufacturer")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ManufacturerId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Model")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ModelID")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ModelYear")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MotorcycleChassisType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MotorcycleSuspensionType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NCSABodyType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NCSAMake")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NCSAMapExcApprovedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NCSAMapExcApprovedOn")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NCSAMappingException")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NCSAModel")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("NCSANote")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Note")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherBusInfo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherEngineInfo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherMotorcycleInfo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherRestraintSystemInfo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OtherTrailerInfo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ParkAssist")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PedestrianAutomaticEmergencyBraking")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PlantCity")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PlantCompanyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PlantCountry")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PlantState")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PossibleValues")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Pretensioner")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RearAutomaticEmergencyBraking")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RearCrossTrafficAlert")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RearVisibilitySystem")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SAEAutomationLevel")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SAEAutomationLevel_to")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SeatBeltsAll")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SeatRows")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Seats")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SemiautomaticHeadlampBeamSwitching")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Series")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Series2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SteeringLocation")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SuggestedVIN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TPMS")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TopSpeedMPH")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TrackWidth")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TractionControl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TrailerBodyType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TrailerLength")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TrailerType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TransmissionSpeeds")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TransmissionStyle")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Trim")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Trim2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Turbo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("VIN")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ValveTrainDesign")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("VehicleType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WheelBaseLong")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WheelBaseShort")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WheelBaseType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WheelSizeFront")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WheelSizeRear")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Wheels")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Windows")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Video", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Car", "Car")
                        .WithOne("Video")
                        .HasForeignKey("DataAccessLayer.Models.Video", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
